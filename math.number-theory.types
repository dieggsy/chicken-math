; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.base.scm

(math.number-theory.base#prime-power?
  (#(procedure) math.number-theory.base#prime-power? (integer) boolean))

(math.number-theory.base#nth-prime
  (#(procedure) math.number-theory.base#nth-prime (integer) integer))

(math.number-theory.base#solve-chinese
  (#(procedure)
   math.number-theory.base#solve-chinese
   ((list-of integer) (list-of integer))
   integer))

(math.number-theory.base#next-primes
  (#(procedure)
   math.number-theory.base#next-primes
   (integer integer)
   (list-of integer)))

(math.number-theory.base#divisors
  (#(procedure) math.number-theory.base#divisors (integer) (list-of integer)))

(math.number-theory.base#odd-prime?
  (#(procedure) math.number-theory.base#odd-prime? (integer) boolean))

(math.number-theory.base#defactorize
  (#(procedure)
   math.number-theory.base#defactorize
   ((list-of (list integer integer)))
   integer))

(math.number-theory.base#prime-exponents
  (#(procedure)
   math.number-theory.base#prime-exponents
   (integer)
   (list-of integer)))

(math.number-theory.base#perfect-power?
  (#(procedure) math.number-theory.base#perfect-power? (integer) boolean))

(math.number-theory.base#prime-divisors
  (#(procedure)
   math.number-theory.base#prime-divisors
   (integer)
   (list-of integer)))

(math.number-theory.base#odd-prime-power?
  (#(procedure) math.number-theory.base#odd-prime-power? (integer) boolean))

(math.number-theory.base#prime-power
  (#(procedure)
   math.number-theory.base#prime-power
   (integer)
   (or (list integer integer) false)))

(math.number-theory.base#prime-omega
  (#(procedure) math.number-theory.base#prime-omega (integer) integer))

(math.number-theory.base#max-dividing-power
  (#(procedure)
   math.number-theory.base#max-dividing-power
   (integer integer)
   integer))

(math.number-theory.base#perfect-power
  (#(procedure)
   math.number-theory.base#perfect-power
   (integer)
   (or (list integer integer) false)))

(math.number-theory.base#divisor-sum
  (#(procedure)
   math.number-theory.base#divisor-sum
   (integer #!optional integer)
   integer))

(math.number-theory.base#moebius-mu
  (#(procedure) math.number-theory.base#moebius-mu (integer) integer))

(math.number-theory.base#integer-root/remainder
  (#(procedure)
   math.number-theory.base#integer-root/remainder
   (integer integer)
   integer
   integer))

(math.number-theory.base#as-power
  (#(procedure) math.number-theory.base#as-power (integer) integer integer))

(math.number-theory.base#perfect-square
  (#(procedure)
   math.number-theory.base#perfect-square
   (integer)
   (or integer false)))

(math.number-theory.base#random-prime
  (#(procedure) math.number-theory.base#random-prime (integer) integer))

(math.number-theory.base#prime?
  (#(procedure) math.number-theory.base#prime? (integer) boolean))

(math.number-theory.base#prev-primes
  (#(procedure)
   math.number-theory.base#prev-primes
   (integer integer)
   (list-of integer)))

(math.number-theory.base#integer-root
  (#(procedure)
   math.number-theory.base#integer-root
   (integer integer)
   integer))

(math.number-theory.base#prev-prime
  (#(procedure) math.number-theory.base#prev-prime (integer) integer))

(math.number-theory.base#mangoldt-lambda
  (#(procedure)
   math.number-theory.base#mangoldt-lambda
   (integer)
   (or integer float ratnum)))

(math.number-theory.base#next-prime
  (#(procedure) math.number-theory.base#next-prime (integer) integer))

(math.number-theory.base#totient
  (#(procedure) math.number-theory.base#totient (integer) integer))

(math.number-theory.base#factorize
  (#(procedure)
   math.number-theory.base#factorize
   (integer)
   (list-of (list integer integer))))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.bernoulli.scm

(math.number-theory.bernoulli#bernoulli-number
  (#(procedure)
   math.number-theory.bernoulli#bernoulli-number
   (integer)
   (or ratnum integer)))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.binomial.scm

(math.number-theory.binomial#binomial
  (#(procedure)
   math.number-theory.binomial#binomial
   (integer integer)
   integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.divisibility.scm

(math.number-theory.divisibility#bezout
  (#(procedure)
   math.number-theory.divisibility#bezout
   (integer #!rest integer)
   (list-of integer)))

(math.number-theory.divisibility#pairwise-coprime?
  (#(procedure)
   math.number-theory.divisibility#pairwise-coprime?
   (integer #!rest integer)
   boolean))

(math.number-theory.divisibility#divides?
  (#(procedure)
   math.number-theory.divisibility#divides?
   (integer integer)
   boolean))

(math.number-theory.divisibility#coprime?
  (#(procedure)
   math.number-theory.divisibility#coprime?
   (integer #!rest integer)
   boolean))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.eulerian-number.scm

(math.number-theory.eulerian-number#eulerian-number
  (#(procedure)
   math.number-theory.eulerian-number#eulerian-number
   (integer integer)
   integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.factorial.scm

(math.number-theory.factorial#permutations
  (#(procedure)
   math.number-theory.factorial#permutations
   (integer integer)
   integer))

(math.number-theory.factorial#multinomial
  (#(procedure)
   math.number-theory.factorial#multinomial
   (integer (list-of integer))
   integer))

(math.number-theory.factorial#factorial
  (#(procedure) math.number-theory.factorial#factorial (integer) integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.farey.scm

(math.number-theory.farey#farey-sequence
  (#(procedure)
   math.number-theory.farey#farey-sequence
   (integer)
   (list-of (or ratnum integer))))

(math.number-theory.farey#mediant
  (#(procedure)
   math.number-theory.farey#mediant
   ((or ratnum integer) (or ratnum integer))
   (or ratnum integer)))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.fibonacci.scm

(math.number-theory.fibonacci#make-fibonacci
  (#(procedure)
   math.number-theory.fibonacci#make-fibonacci
   (integer integer)
   (procedure (integer) integer)))

(math.number-theory.fibonacci#make-modular-fibonacci
  (#(procedure)
   math.number-theory.fibonacci#make-modular-fibonacci
   (* *)
   (procedure (number number) integer)))

(math.number-theory.fibonacci#modular-fibonacci
  (#(procedure) (number number) integer))

(math.number-theory.fibonacci#fibonacci (#(procedure) (integer) integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.modular-arithmetic.scm

(math.number-theory.modular-arithmetic#mod
  (#(procedure)
   math.number-theory.modular-arithmetic#mod
   ((or ratnum integer))
   integer))

(math.number-theory.modular-arithmetic#modexpt
  (#(procedure)
   math.number-theory.modular-arithmetic#modexpt
   (integer integer)
   integer))

(math.number-theory.modular-arithmetic#current-modulus
  (#(procedure) math.number-theory.modular-arithmetic#current-modulus () . *))

(math.number-theory.modular-arithmetic#mod>
  (#(procedure)
   math.number-theory.modular-arithmetic#mod>
   (integer #!rest integer)
   boolean))

(math.number-theory.modular-arithmetic#mod=
  (#(procedure)
   math.number-theory.modular-arithmetic#mod=
   (integer #!rest integer)
   boolean))

(math.number-theory.modular-arithmetic#mod<
  (#(procedure)
   math.number-theory.modular-arithmetic#mod<
   (integer #!rest integer)
   boolean))

(math.number-theory.modular-arithmetic#mod*
  (#(procedure)
   math.number-theory.modular-arithmetic#mod*
   (#!rest integer)
   integer))

(math.number-theory.modular-arithmetic#mod/
  (#(procedure)
   math.number-theory.modular-arithmetic#mod/
   (integer #!rest integer)
   integer))

(math.number-theory.modular-arithmetic#mod-
  (#(procedure)
   math.number-theory.modular-arithmetic#mod-
   (integer #!rest integer)
   integer))

(math.number-theory.modular-arithmetic#mod+
  (#(procedure)
   math.number-theory.modular-arithmetic#mod+
   (#!rest integer)
   integer))

(math.number-theory.modular-arithmetic#modular-inverse
  (#(procedure)
   math.number-theory.modular-arithmetic#modular-inverse
   (integer integer)
   integer))

(math.number-theory.modular-arithmetic#current-modulus-param procedure)

(math.number-theory.modular-arithmetic#modular-expt
  (#(procedure)
   math.number-theory.modular-arithmetic#modular-expt
   (integer integer integer)
   integer))

(math.number-theory.modular-arithmetic#modsqr
  (#(procedure)
   math.number-theory.modular-arithmetic#modsqr
   (integer)
   integer))

(math.number-theory.modular-arithmetic#mod>=
  (#(procedure)
   math.number-theory.modular-arithmetic#mod>=
   (integer #!rest integer)
   boolean))

(math.number-theory.modular-arithmetic#mod<=
  (#(procedure)
   math.number-theory.modular-arithmetic#mod<=
   (integer #!rest integer)
   boolean))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.partitions.scm

(math.number-theory.partitions#set-partitions-cache
  (#(procedure)
   math.number-theory.partitions#set-partitions-cache
   (fixnum)
   undefined))

(math.number-theory.partitions#partitions
  (#(procedure) math.number-theory.partitions#partitions (number) integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.polygonal.scm

(math.number-theory.polygonal#triangle-number?
  (#(procedure)
   math.number-theory.polygonal#triangle-number?
   (integer)
   boolean))

(math.number-theory.polygonal#octagonal-number
  (#(procedure)
   math.number-theory.polygonal#octagonal-number
   (integer)
   integer))

(math.number-theory.polygonal#hexagonal-number
  (#(procedure)
   math.number-theory.polygonal#hexagonal-number
   (integer)
   integer))

(math.number-theory.polygonal#heptagonal-number?
  (#(procedure)
   math.number-theory.polygonal#heptagonal-number?
   (integer)
   boolean))

(math.number-theory.polygonal#pentagonal-number
  (#(procedure)
   math.number-theory.polygonal#pentagonal-number
   (integer)
   integer))

(math.number-theory.polygonal#octagonal-number?
  (#(procedure)
   math.number-theory.polygonal#octagonal-number?
   (integer)
   boolean))

(math.number-theory.polygonal#pentagonal-number?
  (#(procedure)
   math.number-theory.polygonal#pentagonal-number?
   (integer)
   boolean))

(math.number-theory.polygonal#heptagonal-number
  (#(procedure)
   math.number-theory.polygonal#heptagonal-number
   (integer)
   integer))

(math.number-theory.polygonal#square-number?
  (#(procedure) math.number-theory.polygonal#square-number? (integer) boolean))

(math.number-theory.polygonal#hexagonal-number?
  (#(procedure)
   math.number-theory.polygonal#hexagonal-number?
   (integer)
   boolean))

(math.number-theory.polygonal#triangle-number
  (#(procedure)
   math.number-theory.polygonal#triangle-number
   (integer)
   integer))

(math.number-theory.polygonal#sqr
  (#(procedure) math.number-theory.polygonal#sqr (integer) integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.primitive-roots.scm

(math.number-theory.primitive-roots#primitive-roots
  (#(procedure)
   math.number-theory.primitive-roots#primitive-roots
   (integer)
   (list-of integer)))

(math.number-theory.primitive-roots#unit-group-order
  (#(procedure)
   math.number-theory.primitive-roots#unit-group-order
   (integer integer)
   integer))

(math.number-theory.primitive-roots#exists-primitive-root?
  (#(procedure)
   math.number-theory.primitive-roots#exists-primitive-root?
   (integer)
   boolean))

(math.number-theory.primitive-roots#unit-group
  (#(procedure)
   math.number-theory.primitive-roots#unit-group
   (integer)
   (list-of integer)))

(math.number-theory.primitive-roots#unit-group-orders
  (#(procedure)
   math.number-theory.primitive-roots#unit-group-orders
   (integer)
   (list-of integer)))

(math.number-theory.primitive-roots#primitive-root
  (#(procedure)
   math.number-theory.primitive-roots#primitive-root
   (integer)
   (or integer false)))

(math.number-theory.primitive-roots#primitive-root?
  (#(procedure)
   math.number-theory.primitive-roots#primitive-root?
   (integer integer)
   boolean))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.quadratic-residues.scm

(math.number-theory.quadratic-residues#jacobi-symbol
  (#(procedure)
   math.number-theory.quadratic-residues#jacobi-symbol
   (integer integer)
   integer))

(math.number-theory.quadratic-residues#quadratic-residue?
  (#(procedure)
   math.number-theory.quadratic-residues#quadratic-residue?
   (integer integer)
   boolean))

(math.number-theory.quadratic-residues#quadratic-character
  (#(procedure)
   math.number-theory.quadratic-residues#quadratic-character
   (integer integer)
   integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.quadratic.scm

(math.number-theory.quadratic#complex-quadratic-solutions
  (#(procedure)
   math.number-theory.quadratic#complex-quadratic-solutions
   (number number number)
   (list-of number)))

(math.number-theory.quadratic#quadratic-natural-solutions
  (#(procedure)
   math.number-theory.quadratic#quadratic-natural-solutions
   ((or integer float ratnum)
    (or integer float ratnum)
    (or integer float ratnum))
   (list-of integer)))

(math.number-theory.quadratic#quadratic-integer-solutions
  (#(procedure)
   math.number-theory.quadratic#quadratic-integer-solutions
   ((or integer float ratnum)
    (or integer float ratnum)
    (or integer float ratnum))
   (list-of integer)))

(math.number-theory.quadratic#quadratic-solutions
  (#(procedure)
   math.number-theory.quadratic#quadratic-solutions
   ((or integer float ratnum)
    (or integer float ratnum)
    (or integer float ratnum))
   (list-of (or integer float ratnum))))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.small-primes.scm

(math.number-theory.small-primes#*SMALL-PRIME-LIMIT* fixnum)

(math.number-theory.small-primes#small-prime?
  (#(procedure) math.number-theory.small-primes#small-prime? (fixnum) boolean))

; END OF FILE
; GENERATED BY CHICKEN 5.2.0 FROM number-theory/math.number-theory.tangent-number.scm

(math.number-theory.tangent-number#tangent-number
  (#(procedure)
   math.number-theory.tangent-number#tangent-number
   (integer)
   integer))

; END OF FILE
