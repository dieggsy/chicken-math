; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.bits.scm

(math.flonum.bits#flonum->bit-field
  (#(procedure) math.flonum.bits#flonum->bit-field (float) integer))

(math.flonum.bits#flonum->sig+exp
  (#(procedure) math.flonum.bits#flonum->sig+exp (float) integer fixnum))

(math.flonum.bits#flonum->fields
  (#(procedure) math.flonum.bits#flonum->fields (float) fixnum fixnum integer))

(math.flonum.bits#fpnext (#(procedure) math.flonum.bits#fpnext (float) float))

(math.flonum.bits#ordinal->flonum
  (#(procedure) math.flonum.bits#ordinal->flonum (integer) float))

(math.flonum.bits#flonums-between
  (#(procedure) math.flonum.bits#flonums-between (float float) integer))

(math.flonum.bits#sig+exp->flonum
  (#(procedure) math.flonum.bits#sig+exp->flonum (integer integer) float))

(math.flonum.bits#fpstep
  (#(procedure) math.flonum.bits#fpstep (float integer) float))

(math.flonum.bits#fpprev (#(procedure) math.flonum.bits#fpprev (float) float))

(math.flonum.bits#bit-field->flonum
  (#(procedure) math.flonum.bits#bit-field->flonum (integer) float))

(math.flonum.bits#fields->flonum
  (#(procedure)
   math.flonum.bits#fields->flonum
   (integer integer integer)
   float))

(math.flonum.bits#flonum->ordinal
  (#(procedure) math.flonum.bits#flonum->ordinal (float) integer))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.brent-dekker.scm

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.constants.scm

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.error.scm

(math.flonum.error#fp//error
  (#(procedure) math.flonum.error#fp//error (float float) float float))

(math.flonum.error#fpfma/error
  (#(procedure) math.flonum.error#fpfma/error (float float float) float float))

(math.flonum.error#fpfsa/error
  (#(procedure) math.flonum.error#fpfsa/error (float float) float float))

(math.flonum.error#fp*/error
  (#(procedure) math.flonum.error#fp*/error (float float) float float))

(math.flonum.error#fpsqr/error
  (#(procedure) math.flonum.error#fpsqr/error (float) float float))

(math.flonum.error#fp-/error
  (#(procedure) math.flonum.error#fp-/error (float float) float float))

(math.flonum.error#fp+/error
  (#(procedure) math.flonum.error#fp+/error (float float) float float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/expansion/math.flonum.expansion.base.scm

(math.flonum.expansion.base#fp2ulp-error
  (#(procedure)
   math.flonum.expansion.base#fp2ulp-error
   (float float (or integer float ratnum))
   float))

(math.flonum.expansion.base#fp2sqr
  (#(procedure)
   math.flonum.expansion.base#fp2sqr
   (float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2->real
  (#(procedure)
   math.flonum.expansion.base#fp2->real
   (float float)
   (or integer float ratnum)))

(math.flonum.expansion.base#fp2infinite?
  (#(procedure) math.flonum.expansion.base#fp2infinite? (float float) boolean))

(math.flonum.expansion.base#fp2prev
  (#(procedure) math.flonum.expansion.base#fp2prev (float float) float float))

(math.flonum.expansion.base#fp2zero?
  (#(procedure) math.flonum.expansion.base#fp2zero? (float float) boolean))

(math.flonum.expansion.base#fp2nan?
  (#(procedure) math.flonum.expansion.base#fp2nan? (float float) boolean))

(math.flonum.expansion.base#fp2<
  (#(procedure)
   math.flonum.expansion.base#fp2<
   (float float float float)
   boolean))

(math.flonum.expansion.base#fp2-
  (#(procedure)
   math.flonum.expansion.base#fp2-
   (float float float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2/
  (#(procedure)
   math.flonum.expansion.base#fp2/
   (float float float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2>
  (#(procedure)
   math.flonum.expansion.base#fp2>
   (float float float float)
   boolean))

(math.flonum.expansion.base#fp2=
  (#(procedure)
   math.flonum.expansion.base#fp2=
   (float float float float)
   boolean))

(math.flonum.expansion.base#fp2*
  (#(procedure)
   math.flonum.expansion.base#fp2*
   (float float float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2+
  (#(procedure)
   math.flonum.expansion.base#fp2+
   (float float float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2
  (#(procedure)
   math.flonum.expansion.base#fp2
   ((or integer float ratnum) #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2positive?
  (#(procedure) math.flonum.expansion.base#fp2positive? (float float) boolean))

(math.flonum.expansion.base#fp2negative?
  (#(procedure) math.flonum.expansion.base#fp2negative? (float float) boolean))

(math.flonum.expansion.base#fp2abs
  (#(procedure)
   math.flonum.expansion.base#fp2abs
   (float #!optional float)
   float
   float))

(math.flonum.expansion.base#fp2next
  (#(procedure) math.flonum.expansion.base#fp2next (float float) float float))

(math.flonum.expansion.base#fp2step
  (#(procedure)
   math.flonum.expansion.base#fp2step
   (float float integer)
   float
   float))

(math.flonum.expansion.base#fp2rational?
  (#(procedure) math.flonum.expansion.base#fp2rational? (float float) boolean))

(math.flonum.expansion.base#fp2*split-fp
  (#(procedure)
   math.flonum.expansion.base#fp2*split-fp
   (float float float float)
   float
   float))

(math.flonum.expansion.base#fpsqrt/error
  (#(procedure) math.flonum.expansion.base#fpsqrt/error (float) float float))

(math.flonum.expansion.base#fp2<=
  (#(procedure)
   math.flonum.expansion.base#fp2<=
   (float float float float)
   boolean))

(math.flonum.expansion.base#fp2ulp
  (#(procedure) math.flonum.expansion.base#fp2ulp (float float) float))

(math.flonum.expansion.base#fp2>=
  (#(procedure)
   math.flonum.expansion.base#fp2>=
   (float float float float)
   boolean))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/expansion/math.flonum.expansion.exp-reduction.scm

(math.flonum.expansion.exp-reduction#fpexpm1-reduction
  (#(procedure)
   math.flonum.expansion.exp-reduction#fpexpm1-reduction
   (float)
   float
   float
   float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/expansion/math.flonum.expansion.exp.scm

(math.flonum.expansion.exp#fp2exp
  (#(procedure) math.flonum.expansion.exp#fp2exp (float float) float float))

(math.flonum.expansion.exp#fp2expm1
  (#(procedure) math.flonum.expansion.exp#fp2expm1 (float float) float float))

(math.flonum.expansion.exp#fpexpm1/error
  (#(procedure) math.flonum.expansion.exp#fpexpm1/error (float) float float))

(math.flonum.expansion.exp#fpexp/error
  (#(procedure) math.flonum.expansion.exp#fpexp/error (float) float float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/expansion/math.flonum.expansion.log.scm

(math.flonum.expansion.log#fp2log
  (#(procedure) math.flonum.expansion.log#fp2log (float float) float float))

(math.flonum.expansion.log#fp2log1p
  (#(procedure) math.flonum.expansion.log#fp2log1p (float float) float float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.exp.scm

(math.flonum.exp#fppow2near
  (#(procedure) math.flonum.exp#fppow2near (float) float))

(math.flonum.exp#fpexp1p (#(procedure) math.flonum.exp#fpexp1p (float) float))

(math.flonum.exp#fpgauss (#(procedure) math.flonum.exp#fpgauss (float) float))

(math.flonum.exp#fpexp2 (#(procedure) math.flonum.exp#fpexp2 (float) float))

(math.flonum.exp#fpexpsqr
  (#(procedure) math.flonum.exp#fpexpsqr (float) float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.factorial.scm

(math.flonum.factorial#fpbinomial
  (#(procedure) math.flonum.factorial#fpbinomial (float float) float))

(math.flonum.factorial#fplog-binomial
  (#(procedure) math.flonum.factorial#fplog-binomial (float float) float))

(math.flonum.factorial#fplog-factorial
  (#(procedure) math.flonum.factorial#fplog-factorial (float) float))

(math.flonum.factorial#fpfactorial
  (#(procedure) math.flonum.factorial#fpfactorial (float) float))

(math.flonum.factorial#fpmultinomial
  (#(procedure)
   math.flonum.factorial#fpmultinomial
   (float (list-of float))
   float))

(math.flonum.factorial#fplog-permutations
  (#(procedure) math.flonum.factorial#fplog-permutations (float float) float))

(math.flonum.factorial#fppermutations
  (#(procedure) math.flonum.factorial#fppermutations (float float) float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.fpvector.scm

(math.flonum.fpvector#fpvector-map
  (#(procedure)
   math.flonum.fpvector#fpvector-map
   (procedure
     (struct f64vector)
     #!optional
     (struct f64vector)
     #!rest
     (list-of (struct f64vector)))
   (struct f64vector)))

(math.flonum.fpvector#fpvector-scale
  (#(procedure)
   math.flonum.fpvector#fpvector-scale
   ((struct f64vector) float)
   (struct f64vector)))

(math.flonum.fpvector#fpvector+
  (#(procedure)
   math.flonum.fpvector#fpvector+
   ((struct f64vector) (struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector-
  (#(procedure)
   math.flonum.fpvector#fpvector-
   ((struct f64vector) #!optional (struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector*
  (#(procedure)
   math.flonum.fpvector#fpvector*
   ((struct f64vector) (struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector/
  (#(procedure)
   math.flonum.fpvector#fpvector/
   ((struct f64vector) #!optional (struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector-sqrt
  (#(procedure)
   math.flonum.fpvector#fpvector-sqrt
   ((struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#unsafe-fpvector-copy!
  (#(procedure)
   math.flonum.fpvector#unsafe-fpvector-copy!
   ((struct f64vector) integer (struct f64vector) integer integer)
   undefined))

(math.flonum.fpvector#vector->fpvector
  (#(procedure)
   math.flonum.fpvector#vector->fpvector
   (vector)
   (struct f64vector)))

(math.flonum.fpvector#fpvector-abs
  (#(procedure)
   math.flonum.fpvector#fpvector-abs
   ((struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector->vector
  (#(procedure)
   math.flonum.fpvector#fpvector->vector
   ((struct f64vector))
   vector))

(math.flonum.fpvector#fpvector-sqr
  (#(procedure)
   math.flonum.fpvector#fpvector-sqr
   ((struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector-min
  (#(procedure)
   math.flonum.fpvector#fpvector-min
   ((struct f64vector) (struct f64vector))
   (struct f64vector)))

(math.flonum.fpvector#fpvector-copy!
  (#(procedure)
   math.flonum.fpvector#fpvector-copy!
   ((struct f64vector) integer (struct f64vector) #!optional integer integer)
   undefined))

(math.flonum.fpvector#fpvector-max
  (#(procedure)
   math.flonum.fpvector#fpvector-max
   ((struct f64vector) (struct f64vector))
   (struct f64vector)))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.functions.scm

(math.flonum.functions#fpsinpix
  (#(procedure) math.flonum.functions#fpsinpix (float) float))

(math.flonum.functions#fpprev*
  (#(procedure) math.flonum.functions#fpprev* (float) float))

(math.flonum.functions#fpinfinite?
  (#(procedure) math.flonum.functions#fpinfinite? (float) boolean))

(math.flonum.functions#fpcotpix
  (#(procedure) math.flonum.functions#fpcotpix (float) float))

(math.flonum.functions#fpcscpix
  (#(procedure) math.flonum.functions#fpcscpix (float) float))

(math.flonum.functions#fplog/base
  (#(procedure) math.flonum.functions#fplog/base (float float) float))

(math.flonum.functions#fprational?
  (#(procedure) math.flonum.functions#fprational? (float) boolean))

(math.flonum.functions#fpodd?
  (#(procedure) math.flonum.functions#fpodd? (float) boolean))

(math.flonum.functions#fpprobability?
  (#(procedure)
   math.flonum.functions#fpprobability?
   (float #!optional boolean)
   boolean))

(math.flonum.functions#fphypot
  (#(procedure) math.flonum.functions#fphypot (float float) float))

(math.flonum.functions#fpeven?
  (#(procedure) math.flonum.functions#fpeven? (float) boolean))

(math.flonum.functions#fpsgn
  (#(procedure) math.flonum.functions#fpsgn (float) float))

(math.flonum.functions#fpnext*
  (#(procedure) math.flonum.functions#fpnext* (float) float))

(math.flonum.functions#fpsecpix
  (#(procedure) math.flonum.functions#fpsecpix (float) float))

(math.flonum.functions#fpnan?
  (#(procedure) math.flonum.functions#fpnan? (float) boolean))

(math.flonum.functions#fpsubnormal?
  (#(procedure) math.flonum.functions#fpsubnormal? (float) boolean))

(math.flonum.functions#fpcospix
  (#(procedure) math.flonum.functions#fpcospix (float) float))

(math.flonum.functions#fptanpix
  (#(procedure) math.flonum.functions#fptanpix (float) float))

(math.flonum.functions#fpulp-error
  (#(procedure)
   math.flonum.functions#fpulp-error
   (float (or integer float ratnum))
   float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.log1pmx.scm

(math.flonum.log1pmx#fplog1pmx
  (#(procedure) math.flonum.log1pmx#fplog1pmx (float) float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.log.scm

(math.flonum.log#lgsum
  (#(procedure) math.flonum.log#lgsum ((list-of float)) float))

(math.flonum.log#lg1- (#(procedure) math.flonum.log#lg1- (float) float))

(math.flonum.log#lg1+ (#(procedure) math.flonum.log#lg1+ (float) float))

(math.flonum.log#lg- (#(procedure) math.flonum.log#lg- (float float) float))

(math.flonum.log#fplog1p (#(procedure) math.flonum.log#fplog1p (float) float))

(math.flonum.log#lg+ (#(procedure) math.flonum.log#lg+ (float float) float))

(math.flonum.log#fplogb
  (#(procedure) math.flonum.log#fplogb (float float) float))

(math.flonum.log#fplog+
  (#(procedure) math.flonum.log#fplog+ (float float) float))

(math.flonum.log#fplog2 (#(procedure) math.flonum.log#fplog2 (float) float))

(math.flonum.log#fplog-quotient
  (#(procedure) math.flonum.log#fplog-quotient (float float) float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.more-functions.scm

(math.flonum.more-functions#fpcosh
  (#(procedure) math.flonum.more-functions#fpcosh (float) float))

(math.flonum.more-functions#make-fpexpt
  (#(procedure)
   math.flonum.more-functions#make-fpexpt
   ((or ratnum integer))
   (procedure (float) float)))

(math.flonum.more-functions#fpasinh
  (#(procedure) math.flonum.more-functions#fpasinh (float) float))

(math.flonum.more-functions#fpsqrt1pm1
  (#(procedure) math.flonum.more-functions#fpsqrt1pm1 (float) float))

(math.flonum.more-functions#fptanh
  (#(procedure) math.flonum.more-functions#fptanh (float) float))

(math.flonum.more-functions#fpexpt1p
  (#(procedure) math.flonum.more-functions#fpexpt1p (float float) float))

(math.flonum.more-functions#fpacosh
  (#(procedure) math.flonum.more-functions#fpacosh (float) float))

(math.flonum.more-functions#fpsinh
  (#(procedure) math.flonum.more-functions#fpsinh (float) float))

(math.flonum.more-functions#fpexpt+
  (#(procedure) math.flonum.more-functions#fpexpt+ (float float float) float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.polyfun.scm

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.search.scm

(math.flonum.search#find-least-flonum
  (#(procedure)
   math.flonum.search#find-least-flonum
   ((procedure (float) *) float #!optional float)
   (or float false)))

(math.flonum.search#fpfind-least-integer
  (#(procedure)
   math.flonum.search#fpfind-least-integer
   ((procedure (float) *) #!optional float float float)
   float))

; END OF FILE
; GENERATED BY CHICKEN 5.2.1 FROM flonum/math.flonum.utils.scm

(math.flonum.utils#check-fpvector-lengths!
  (#(procedure)
   math.flonum.utils#check-fpvector-lengths!
   (symbol fixnum (struct f64vector) #!rest (list-of (struct f64vector)))
   undefined))

; END OF FILE
